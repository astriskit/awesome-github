{"version":3,"sources":["assets/spinner.gif","utils/store-context.js","components/Repos.jsx","components/NoRepos.jsx","components/AddRemoveIterator.jsx","components/RepoList.jsx","pages/index.jsx","components/HomeLink.jsx","components/Loading.jsx","components/RepoSearch.jsx","components/Error.jsx","pages/add-repo.jsx","utils/useSearch.js","utils/constants.js","pages/empty.jsx","utils/logger.js","App.js","utils/useStore.js","serviceWorker.js","index.js"],"names":["module","exports","StoreContext","createContext","items","addItem","removeItem","hasItem","Repos","repos","iterator","iteratorProps","data-testid","className","map","href","title","name","key","target","rel","NoRepos","AddRemoveIterator","onAdd","isAdded","onRemove","showAddBtn","showRemoveBtn","style","justifyContent","fontSize","onClick","RepoList","useContext","length","Index","to","HomeLink","Loading","alt","src","Spinner","RepoSearch","onFind","loading","useState","query","setQuery","searchOp","setSearchOp","handleSearchOpt","value","type","placeholder","onChange","checked","disabled","window","alert","minWidth","Error","message","AddRepo","setLoading","op","queryOp","setQueryOp","data","setData","err","setErr","useEffect","a","url","axios","get","headers","Accept","result","html_url","response","error","handleSearch","useSearch","Iterator","item","Empty","logger","console","AppRouter","exact","path","component","App","store","initial","undefined","Array","isArray","stored","localStorage","getItem","JSON","parse","setStore","storey","stringify","setItem","list","filter","ob","find","h","useStore","Provider","Boolean","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5c124985.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.5134db46.gif\";","import { createContext } from \"react\";\n\nexport const StoreContext = createContext({\n  items: [],\n  addItem: () => {},\n  removeItem: () => {},\n  hasItem: () => {},\n});\n","import React from \"react\";\nimport \"./Repos.css\";\n\nexport const Repos = ({ repos = [], iterator, iteratorProps = {} }) => (\n  <ul data-testid=\"repos-list\" className=\"repos-list\">\n    {repos.map(({ href, title, name }) => (\n      <li key={href}>\n        {iterator && typeof iterator === \"function\" ? (\n          iterator({ href, title, name, ...iteratorProps })\n        ) : (\n          <a\n            title={title}\n            href={href}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {name || title}\n          </a>\n        )}\n      </li>\n    ))}\n  </ul>\n);\n","import React from \"react\";\n\nexport const NoRepos = () => (\n  <div className=\"no-repos\">No repositories found</div>\n);\n","import React from \"react\";\n\nexport const AddRemoveIterator = ({\n  name,\n  title,\n  href,\n  onAdd,\n  isAdded,\n  onRemove,\n}) => {\n  const handleAdd = () => {\n    onAdd({ name, href, title: name });\n  };\n  const handleRemove = () => {\n    onRemove(href);\n  };\n\n  const showAddBtn = isAdded && onAdd && !isAdded(href);\n  const showRemoveBtn = isAdded && onRemove && isAdded(href);\n\n  return (\n    <div className=\"flex center\" style={{ justifyContent: \"space-between\" }}>\n      <div>\n        <a\n          href={href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n          style={{ fontSize: \"x-large\" }}\n        >\n          {name || title}\n        </a>\n      </div>\n      <div>\n        {showRemoveBtn && (\n          <button onClick={handleRemove} className=\"secondary danger\">\n            -\n          </button>\n        )}\n        {showAddBtn && (\n          <button onClick={handleAdd} className=\"secondary success\">\n            +\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React, { useContext } from \"react\";\nimport { StoreContext } from \"../utils/store-context\";\nimport { Repos as List } from \"./Repos\";\nimport { NoRepos } from \"./NoRepos\";\nimport { AddRemoveIterator } from \"./AddRemoveIterator\";\nimport \"./RepoList.css\";\n\nexport const RepoList = () => {\n  const { items: repos, removeItem, hasItem } = useContext(StoreContext);\n\n  return (\n    <div data-testid=\"repo-list-container\" className=\"repo-list-container\">\n      {repos.length ? (\n        <List\n          repos={repos}\n          iteratorProps={{ onRemove: removeItem, isAdded: hasItem }}\n          iterator={AddRemoveIterator}\n        />\n      ) : (\n        <NoRepos />\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { RepoList } from \"../components/RepoList\";\n\nexport const Index = () => {\n  return (\n    <div data-testid=\"app-home\">\n      <Link data-testid=\"add-repo\" to=\"/add-repo\" className=\"link\">\n        + Add\n      </Link>\n      <RepoList />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport const HomeLink = () => (\n  <Link data-testid=\"list-repos\" to=\"/\" className=\"link\">\n    Home\n  </Link>\n);\n","import React from \"react\";\nimport Spinner from \"../assets/spinner.gif\";\n\nexport const Loading = () => (\n  <div data-testid=\"loader\">\n    <img alt=\"Loading\" src={Spinner} />\n  </div>\n);\n","import React, { useState } from \"react\";\nimport { Loading } from \"./Loading\";\nimport \"./RepoSearch.css\";\n\nexport const RepoSearch = ({ onFind = () => {}, loading = false }) => {\n  const [query, setQuery] = useState(\"\");\n  const [searchOp, setSearchOp] = useState(\"by-repo\");\n\n  const handleQuery = ({ target: { value } }) => {\n    setQuery(value);\n  };\n\n  const handleSearchOpt = ({ target: { value } }) => {\n    setSearchOp(value);\n  };\n\n  const handleSearch = () => {\n    if (query && searchOp) {\n      onFind(searchOp, query);\n    } else {\n      window.alert(\"Nothing to find!\");\n    }\n  };\n  return (\n    <div className=\"flex column center search-repo-container\">\n      <input\n        type=\"text\"\n        placeholder=\"Type to search\"\n        data-testid=\"search-repo\"\n        value={query}\n        onChange={handleQuery}\n      />\n      <div>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"search-by\"\n            value=\"by-repo\"\n            data-testid=\"search-by-repo\"\n            onChange={handleSearchOpt}\n            checked={searchOp === \"by-repo\" ? true : false}\n          />\n          <span>Repo-name</span>\n        </label>\n        <label>\n          <input\n            type=\"radio\"\n            name=\"search-by\"\n            value=\"by-user\"\n            data-testid=\"search-by-user\"\n            onChange={handleSearchOpt}\n            checked={searchOp === \"by-user\" ? true : false}\n          />\n          <span>Username</span>\n        </label>\n      </div>\n      <button\n        data-testid=\"btn-search\"\n        disabled={loading}\n        onClick={handleSearch}\n        className=\"secondary\"\n        style={{\n          minWidth: \"5rem\",\n        }}\n      >\n        Find\n      </button>\n      {loading && <Loading />}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./Error.css\";\n\nexport const Error = ({ message = \"\" }) => (\n  <div className=\"error\">Error: \"{message}\"</div>\n);\n","import React, { useContext } from \"react\";\nimport { HomeLink } from \"../components/HomeLink\";\nimport { RepoSearch } from \"../components/RepoSearch\";\nimport { NoRepos } from \"../components/NoRepos\";\nimport { Repos } from \"../components/Repos\";\nimport { Error } from \"../components/Error\";\nimport { AddRemoveIterator as Iterator } from \"../components/AddRemoveIterator\";\nimport { useSearch } from \"../utils/useSearch\";\nimport { StoreContext } from \"../utils/store-context\";\n\nexport const AddRepo = () => {\n  const { loading, handleSearch, data, error } = useSearch();\n  const { addItem, removeItem, hasItem } = useContext(StoreContext);\n  const onAdd = (item) => addItem(item);\n  return (\n    <div data-testid=\"app-add-repo\" className=\"add-repo\">\n      <HomeLink />\n      <RepoSearch onFind={handleSearch} loading={loading} />\n      {!loading && (\n        <div className=\"flex center\">\n          {error ? (\n            <Error message={error} />\n          ) : data.length ? (\n            <Repos\n              repos={data}\n              iterator={Iterator}\n              iteratorProps={{ onAdd, isAdded: hasItem, onRemove: removeItem }}\n            />\n          ) : (\n            <NoRepos />\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n","import axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { ghSearchUrl } from \"./constants\";\n\nconst extract = (items) =>\n  items.map(({ html_url: href, name }) => ({ href, name, title: name }));\n\nexport const useSearch = () => {\n  const [loading, setLoading] = useState(false);\n  const [queryOp, setQueryOp] = useState({ query: \"\", op: \"\" });\n  const [data, setData] = useState([]);\n  const [err, setErr] = useState(\"\");\n  useEffect(() => {\n    if (loading) {\n      (async () => {\n        try {\n          const { op, query } = queryOp;\n          let url = `${ghSearchUrl}?q=`;\n          if (op === \"by-user\") {\n            url += `user:${query}`;\n          } else {\n            url += query;\n          }\n          url += \"+is:public\";\n          const result = await axios.get(url, {\n            headers: {\n              Accept: \"application/vnd.github.v3+json\",\n            },\n          });\n          setData(extract(result.data.items));\n          setErr(\"\");\n        } catch (err) {\n          setErr(err?.response?.data?.message ?? err.message);\n        } finally {\n          setLoading(false);\n          setQueryOp({ query: \"\", op: \"\" });\n        }\n      })();\n    }\n  }, [loading, queryOp]);\n\n  const handleSearch = (op, query) => {\n    setQueryOp({ op, query });\n    setLoading(true);\n  };\n\n  return { data, error: err, loading, handleSearch };\n};\n","export const ghSearchUrl = \"https://api.github.com/search/repositories\";\nexport const storeKey = \"bookmarks\";\n","import React from \"react\";\nimport { HomeLink } from \"../components/HomeLink\";\n\nexport const Empty = () => {\n  return (\n    <div>\n      <HomeLink />\n      <div className=\"content\" style={{ fontSize: \"xx-large\" }}>\n        Page not found!\n      </div>\n    </div>\n  );\n};\n","export const logger = console;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { Index } from \"./pages/index\";\nimport { AddRepo } from \"./pages/add-repo\";\nimport { Empty } from \"./pages/empty\";\nimport { useStore } from \"./utils/useStore\";\nimport { StoreContext } from \"./utils/store-context\";\nimport \"./App.css\";\n\nexport const AppRouter = () => (\n  <main data-testid=\"app\">\n    <header className=\"banner\">Github Bookmark Manager</header>\n    <Switch>\n      <Route exact path=\"/add-repo\" component={AddRepo} />\n      <Route exact path=\"/\" component={Index} />\n      <Route component={Empty} />\n    </Switch>\n  </main>\n);\n\nfunction App({ initial }) {\n  const store = useStore(initial);\n  return (\n    <StoreContext.Provider value={store}>\n      <AppRouter />\n    </StoreContext.Provider>\n  );\n}\n\nexport default App;\n","import { useState, useEffect } from \"react\";\nimport { logger } from \"../utils/logger\";\nimport { storeKey as storeName } from \"../utils/constants\";\n\nexport const useStore = (initial = undefined) => {\n  const [store = [], setStore] = useState(() => {\n    if (!initial || !Array.isArray(initial)) {\n      try {\n        const stored = localStorage.getItem(storeName);\n        if (stored) {\n          const store = JSON.parse(stored);\n          return store;\n        } else {\n          return [];\n        }\n      } catch (err) {\n        localStorage.removeItem(storeName);\n        logger.error(\"Possibly invalid JSON; Emptied store!\");\n        return [];\n      }\n    } else {\n      return initial;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      const storey = JSON.stringify(store);\n      localStorage.setItem(storeName, storey);\n    } catch (err) {\n      setStore([]);\n      logger.error(\"Possibly invalid JSON; Emptied store!\");\n    }\n  }, [store]);\n\n  const removeItem = (href) => {\n    const list = store.filter(({ href: h }) => h !== href);\n    setStore(list);\n  };\n\n  const addItem = (ob) => {\n    setStore([...store, ob]);\n  };\n\n  const hasItem = (href) => {\n    return store.find(({ href: h }) => href === h);\n  };\n\n  return {\n    addItem,\n    get items() {\n      return [...store];\n    },\n    removeItem,\n    hasItem,\n  };\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\n/* istanbul ignore file */\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n/* istanbul ignore file */\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL || \"/\"}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}